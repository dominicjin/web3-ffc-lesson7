{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/Fundme.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// praga\npragma solidity ^0.8.7;\n\n// import\nimport \"./PriceConverter.sol\";\n\n// // custom error\nerror notOwner();\n\n// interfaces, libraries, contracts\n\n// @title A contract for crowd funding\n// @author J\n// @notice This contract is to demo a sample funding contract\n// @dev This implements price fees as our library\ncontract Fundme {\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State Variables\n    uint256 public minUSD = 1 * 1e18;\n    address[] public funders;\n    mapping(address => uint256) public fundersToAmountFunded;\n\n    // immutable and constant\n    // constant can only be assigned when initializing\n    // immutable can only be assigned onece\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    // Modifiers\n    // _; represents implement the rest code\n    modifier isOwner() {\n        // require(i_owner == msg.sender, \"Sender is not the owner\");\n        if (i_owner != msg.sender) {\n            revert notOwner();\n        }\n        _;\n    }\n\n    // Functions Orders:\n    /// constructor\n    /// receive\n    /// fallback\n    /// external\n    /// public\n    /// internal\n    /// private\n    /// view / pure\n\n    //constructer will be called once the contract is on the chain\n    //it's a good way to pick the owner\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    /**\n     * @notice Fund the contract\n     * @dev This implements price feeds as our library\n     */\n    // msg value is returned in WEI 10**18\n    function fund() public payable {\n        // PriceConverter.getConversionRate(msg.value);\n        require(\n            msg.value.getConversionRate(priceFeed) >= minUSD,\n            \"Didn't send enough\"\n        );\n        // if (msg.value.getConversionRate(priceFeed) < minUSD) {\n        //     revert notOwner();\n        // }\n\n        funders.push(msg.sender);\n        fundersToAmountFunded[msg.sender] += msg.value;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n\n    function getFundersToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return fundersToAmountFunded[funder];\n    }\n\n    function withdraw() public isOwner {\n        // notice: it is not convenient to check in every function, so we introduce modifier\n        // require(i_owner == msg.sender, \"Sender is not the owner\");\n\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            fundersToAmountFunded[funders[funderIndex]] = 0;\n        }\n\n        //reset the array, 0 represents 0 element\n        funders = new address[](0);\n\n        // only payable address can use transfer\n        // \"this\" means the whole contract\n        // (bool callSuccess, bytes memory data) is the return of call\n        // how is \"call\" used call{}()????\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"call failed\");\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // Sepolia Testnet\r\n        // 0x694AA1769357215DE4FAC081bf1f309aDC325306 ETH/USD\r\n\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        // answer * 10 ** 10, according to decimals = 8\r\n        return uint256(price * 1e10);\r\n        // ETH/USD in WEI\r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256) {\r\n    //     return\r\n    //         AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306)\r\n    //             .version();\r\n    // }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethprice = getPrice(priceFeed);\r\n        // ethprice and ethAmound have 18decimals, so we need to divide one\r\n        uint256 ethAmountInUsd = (ethprice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockV3Aggegator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}